/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type InEuint32Struct = { data: BytesLike };

export type InEuint32StructOutput = [data: string] & { data: string };

export type PermissionStruct = { publicKey: BytesLike; signature: BytesLike };

export type PermissionStructOutput = [publicKey: string, signature: string] & {
  publicKey: string;
  signature: string;
};

export interface AuctionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auctionEndTime"
      | "auctioneer"
      | "bid"
      | "debugEndAuction"
      | "eip712Domain"
      | "endAuction"
      | "getMyBid"
      | "getMyBidDebug"
      | "getWinner"
      | "getWinningBid"
      | "redeemFunds"
      | "winnerAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AuctionEnded" | "EIP712DomainChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "auctionEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctioneer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [InEuint32Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "debugEndAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyBid",
    values: [AddressLike, PermissionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyBidDebug",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getWinner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getWinningBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "winnerAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctioneer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debugEndAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMyBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMyBidDebug",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWinningBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winnerAddress",
    data: BytesLike
  ): Result;
}

export namespace AuctionEndedEvent {
  export type InputTuple = [winner: AddressLike, bid: BigNumberish];
  export type OutputTuple = [winner: string, bid: bigint];
  export interface OutputObject {
    winner: string;
    bid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Auction extends BaseContract {
  connect(runner?: ContractRunner | null): Auction;
  waitForDeployment(): Promise<this>;

  interface: AuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auctionEndTime: TypedContractMethod<[], [bigint], "view">;

  auctioneer: TypedContractMethod<[], [string], "view">;

  bid: TypedContractMethod<[amount: InEuint32Struct], [void], "nonpayable">;

  debugEndAuction: TypedContractMethod<[], [void], "nonpayable">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  endAuction: TypedContractMethod<[], [void], "nonpayable">;

  getMyBid: TypedContractMethod<
    [account: AddressLike, auth: PermissionStruct],
    [bigint],
    "view"
  >;

  getMyBidDebug: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getWinner: TypedContractMethod<[], [string], "view">;

  getWinningBid: TypedContractMethod<[], [[bigint, string]], "view">;

  redeemFunds: TypedContractMethod<[], [void], "nonpayable">;

  winnerAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auctionEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctioneer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bid"
  ): TypedContractMethod<[amount: InEuint32Struct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "debugEndAuction"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "endAuction"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMyBid"
  ): TypedContractMethod<
    [account: AddressLike, auth: PermissionStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyBidDebug"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWinner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWinningBid"
  ): TypedContractMethod<[], [[bigint, string]], "view">;
  getFunction(
    nameOrSignature: "redeemFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "winnerAddress"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AuctionEnded"
  ): TypedContractEvent<
    AuctionEndedEvent.InputTuple,
    AuctionEndedEvent.OutputTuple,
    AuctionEndedEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;

  filters: {
    "AuctionEnded(address,uint32)": TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;
    AuctionEnded: TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
  };
}
