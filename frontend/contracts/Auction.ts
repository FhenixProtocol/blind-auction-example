/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type InEuint32Struct = { data: PromiseOrValue<BytesLike> };

export type InEuint32StructOutput = [string] & { data: string };

export interface AuctionInterface extends utils.Interface {
  functions: {
    "auctionEndTime()": FunctionFragment;
    "auctioneer()": FunctionFragment;
    "bid((bytes))": FunctionFragment;
    "debugEndAuction()": FunctionFragment;
    "endAuction()": FunctionFragment;
    "getWinner()": FunctionFragment;
    "getWinningBid()": FunctionFragment;
    "redeemFunds()": FunctionFragment;
    "winnerAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctionEndTime"
      | "auctioneer"
      | "bid"
      | "debugEndAuction"
      | "endAuction"
      | "getWinner"
      | "getWinningBid"
      | "redeemFunds"
      | "winnerAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctioneer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [InEuint32Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "debugEndAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getWinner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getWinningBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "winnerAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctioneer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debugEndAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWinningBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winnerAddress",
    data: BytesLike
  ): Result;

  events: {
    "AuctionEnded(address,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionEnded"): EventFragment;
}

export interface AuctionEndedEventObject {
  winner: string;
  bid: number;
}
export type AuctionEndedEvent = TypedEvent<
  [string, number],
  AuctionEndedEventObject
>;

export type AuctionEndedEventFilter = TypedEventFilter<AuctionEndedEvent>;

export interface Auction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctioneer(overrides?: CallOverrides): Promise<[string]>;

    bid(
      amount: InEuint32Struct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    debugEndAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getWinner(overrides?: CallOverrides): Promise<[string]>;

    getWinningBid(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    winnerAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  auctionEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  auctioneer(overrides?: CallOverrides): Promise<string>;

  bid(
    amount: InEuint32Struct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  debugEndAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getWinner(overrides?: CallOverrides): Promise<string>;

  getWinningBid(overrides?: CallOverrides): Promise<BigNumber>;

  redeemFunds(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  winnerAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    auctionEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    auctioneer(overrides?: CallOverrides): Promise<string>;

    bid(amount: InEuint32Struct, overrides?: CallOverrides): Promise<void>;

    debugEndAuction(overrides?: CallOverrides): Promise<void>;

    endAuction(overrides?: CallOverrides): Promise<void>;

    getWinner(overrides?: CallOverrides): Promise<string>;

    getWinningBid(overrides?: CallOverrides): Promise<BigNumber>;

    redeemFunds(overrides?: CallOverrides): Promise<void>;

    winnerAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AuctionEnded(address,uint32)"(
      winner?: null,
      bid?: null
    ): AuctionEndedEventFilter;
    AuctionEnded(winner?: null, bid?: null): AuctionEndedEventFilter;
  };

  estimateGas: {
    auctionEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    auctioneer(overrides?: CallOverrides): Promise<BigNumber>;

    bid(
      amount: InEuint32Struct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    debugEndAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getWinner(overrides?: CallOverrides): Promise<BigNumber>;

    getWinningBid(overrides?: CallOverrides): Promise<BigNumber>;

    redeemFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    winnerAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctioneer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bid(
      amount: InEuint32Struct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    debugEndAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getWinner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWinningBid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    winnerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
